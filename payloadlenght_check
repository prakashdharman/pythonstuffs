import requests

# Replace these variables with your Splunk HEC URL and token
hec_url = "https://your_splunk_hec_url:8088/services/collector/event"
hec_token = "your_hec_token"

# Generate a payload exceeding 102400 bytes
payload = "A" * 102401

# Send the payload to HEC
def send_payload_to_hec(payload):
    headers = {
        "Authorization": f"Splunk {hec_token}"
    }
    data = {
        "event": payload
    }

    response = requests.post(hec_url, headers=headers, json=data)
    return response

# Main function
def main():
    print("Sending payload to Splunk HEC...")
    response = send_payload_to_hec(payload)
    print("Response code:", response.status_code)
    print("Response content:", response.content)

if __name__ == "__main__":
    main()


# Generate a payload exceeding 102400 bytes
payload = "A" * 102401

# Print the length of the payload
print("Length of payload:", len(payload), "bytes")



#!/bin/bash

# Replace these variables with your Splunk HEC URL and token
hec_url="https://your_splunk_hec_url:8088/services/collector/event"
hec_token="your_hec_token"

# Generate a payload exceeding 102400 bytes
payload=$(printf '=%.0s' {1..102401})

# Send the payload to HEC


import subprocess

# List of servers to SSH into
servers = ['server1', 'server2', 'server3']  # Add your server names or IP addresses here

# SSH key information
private_key_path = '/path/to/private_key.pem'  # Path to your private key file

# User information
mgr_username = 'mgr'
splunk_username = 'splunk'

# Function to SSH into servers and kill itsi process
def ssh_and_kill_itsi(server):
    try:
        # SSH command to execute
        ssh_command = f"ssh -i {private_key_path} {mgr_username}@{server} 'sudo -u {splunk_username} sh -c \"pid=$(pgrep -f itsi); if [ ! -z $pid ]; then kill -9 $pid && echo \"itsi process killed with PID $pid\"; else echo \"No itsi process found\"; fi\"'"

        # Execute SSH command
        result = subprocess.run(ssh_command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

        # Print result
        if result.returncode == 0:
            print(f"Successfully executed on {server}:")
            print(result.stdout.decode())
        else:
            print(f"Failed to execute on {server}:")
            print(result.stderr.decode())

    except Exception as e:
        print(f'Error occurred while SSHing into {server}: {str(e)}')

# Main function
def main():
    for server in servers:
        print(f'SSHing into {server}...')
        ssh_and_kill_itsi(server)

if __name__ == "__main__":
    main()

response=$(curl -X POST -H "Authorization: Splunk $hec_token" -H "Content-Type: application/json" -d '{"event": "'"$payload"'"}' $hec_url)

# Print the response
echo "Response: $response"
